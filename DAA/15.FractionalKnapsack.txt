#include <stdio.h>
#include <stdlib.h>

// Structure to represent each item
struct Item {
    int weight; // Weight of the item
    int value;  // Value of the item
};

// Comparison function for sorting items based on value per unit weight (greedy criterion)
int compare(const void *a, const void *b) {
    struct Item *item1 = (struct Item *)a;
    struct Item *item2 = (struct Item *)b;
    double ratio1 = (double)item1->value / item1->weight;
    double ratio2 = (double)item2->value / item2->weight;
    if (ratio1 < ratio2) return 1;
    else if (ratio1 > ratio2) return -1;
    else return 0;
}

// Function to solve fractional knapsack problem
double fractionalKnapsack(int capacity, struct Item items[], int n) {
    // Sort items based on value per unit weight in non-increasing order
    qsort(items, n, sizeof(struct Item), compare);

    double totalValue = 0.0; // Total value in the knapsack
    int currentWeight = 0;   // Current weight of items in the knapsack

    for (int i = 0; i < n; i++) {
        if (currentWeight + items[i].weight <= capacity) {
            // If the current item can be added completely
            currentWeight += items[i].weight;
            totalValue += items[i].value;
        } else {
            // If the current item cannot be added completely
            int remainingCapacity = capacity - currentWeight;
            totalValue += (double)remainingCapacity / items[i].weight * items[i].value;
            break; // Knapsack is full, so we can break the loop
        }
    }

    return totalValue;
}

int main() {
    int n, capacity;
    printf("Enter the number of items: ");
    scanf("%d", &n);

    struct Item *items = (struct Item *)malloc(n * sizeof(struct Item));
    if (items == NULL) {
        printf("Memory allocation failed!\n");
        return 1;
    }

    printf("Enter the weight and value of each item:\n");
    for (int i = 0; i < n; i++) {
        printf("Item %d: ", i + 1);
        scanf("%d %d", &items[i].weight, &items[i].value);
    }

    printf("Enter the capacity of the knapsack: ");
    scanf("%d", &capacity);

    double maxValue = fractionalKnapsack(capacity, items, n);
    printf("The maximum value that can be obtained is: %.2f\n", maxValue);

    free(items);
    return 0;
}
